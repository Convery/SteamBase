// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends.proto

#ifndef PROTOBUF_friends_2eproto__INCLUDED
#define PROTOBUF_friends_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace HedgeNodeProto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_friends_2eproto();
void protobuf_AssignDesc_friends_2eproto();
void protobuf_ShutdownFile_friends_2eproto();

class SteamFriendInfo;
class SteamFriendsResult;

// ===================================================================

class SteamFriendInfo : public ::google::protobuf::Message {
 public:
  SteamFriendInfo();
  virtual ~SteamFriendInfo();

  SteamFriendInfo(const SteamFriendInfo& from);

  inline SteamFriendInfo& operator=(const SteamFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SteamFriendInfo& default_instance();

  void Swap(SteamFriendInfo* other);

  // implements Message ----------------------------------------------

  inline SteamFriendInfo* New() const { return New(NULL); }

  SteamFriendInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SteamFriendInfo& from);
  void MergeFrom(const SteamFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SteamFriendInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 clientId = 1;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  ::google::protobuf::uint64 clientid() const;
  void set_clientid(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:HedgeNodeProto.SteamFriendInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_friends_2eproto();
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static SteamFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class SteamFriendsResult : public ::google::protobuf::Message {
 public:
  SteamFriendsResult();
  virtual ~SteamFriendsResult();

  SteamFriendsResult(const SteamFriendsResult& from);

  inline SteamFriendsResult& operator=(const SteamFriendsResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SteamFriendsResult& default_instance();

  void Swap(SteamFriendsResult* other);

  // implements Message ----------------------------------------------

  inline SteamFriendsResult* New() const { return New(NULL); }

  SteamFriendsResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SteamFriendsResult& from);
  void MergeFrom(const SteamFriendsResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SteamFriendsResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
  int steamfriendinfo_size() const;
  void clear_steamfriendinfo();
  static const int kSteamFriendInfoFieldNumber = 1;
  const ::HedgeNodeProto::SteamFriendInfo& steamfriendinfo(int index) const;
  ::HedgeNodeProto::SteamFriendInfo* mutable_steamfriendinfo(int index);
  ::HedgeNodeProto::SteamFriendInfo* add_steamfriendinfo();
  const ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo >&
      steamfriendinfo() const;
  ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo >*
      mutable_steamfriendinfo();

  // @@protoc_insertion_point(class_scope:HedgeNodeProto.SteamFriendsResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo > steamfriendinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_friends_2eproto();
  friend void protobuf_AssignDesc_friends_2eproto();
  friend void protobuf_ShutdownFile_friends_2eproto();

  void InitAsDefaultInstance();
  static SteamFriendsResult* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SteamFriendInfo

// optional uint64 clientId = 1;
inline void SteamFriendInfo::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SteamFriendInfo::clientid() const {
  // @@protoc_insertion_point(field_get:HedgeNodeProto.SteamFriendInfo.clientId)
  return clientid_;
}
inline void SteamFriendInfo::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:HedgeNodeProto.SteamFriendInfo.clientId)
}

// optional string name = 2;
inline void SteamFriendInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SteamFriendInfo::name() const {
  // @@protoc_insertion_point(field_get:HedgeNodeProto.SteamFriendInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SteamFriendInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HedgeNodeProto.SteamFriendInfo.name)
}
inline void SteamFriendInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HedgeNodeProto.SteamFriendInfo.name)
}
inline void SteamFriendInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HedgeNodeProto.SteamFriendInfo.name)
}
inline ::std::string* SteamFriendInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HedgeNodeProto.SteamFriendInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SteamFriendInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SteamFriendInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HedgeNodeProto.SteamFriendInfo.name)
}

// -------------------------------------------------------------------

// SteamFriendsResult

// repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
inline int SteamFriendsResult::steamfriendinfo_size() const {
  return steamfriendinfo_.size();
}
inline void SteamFriendsResult::clear_steamfriendinfo() {
  steamfriendinfo_.Clear();
}
inline const ::HedgeNodeProto::SteamFriendInfo& SteamFriendsResult::steamfriendinfo(int index) const {
  // @@protoc_insertion_point(field_get:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_.Get(index);
}
inline ::HedgeNodeProto::SteamFriendInfo* SteamFriendsResult::mutable_steamfriendinfo(int index) {
  // @@protoc_insertion_point(field_mutable:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_.Mutable(index);
}
inline ::HedgeNodeProto::SteamFriendInfo* SteamFriendsResult::add_steamfriendinfo() {
  // @@protoc_insertion_point(field_add:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo >&
SteamFriendsResult::steamfriendinfo() const {
  // @@protoc_insertion_point(field_list:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo >*
SteamFriendsResult::mutable_steamfriendinfo() {
  // @@protoc_insertion_point(field_mutable_list:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return &steamfriendinfo_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HedgeNodeProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friends_2eproto__INCLUDED
