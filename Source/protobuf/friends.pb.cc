// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friends.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friends.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HedgeNodeProto {

namespace {

const ::google::protobuf::Descriptor* SteamFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SteamFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SteamFriendsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SteamFriendsResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friends_2eproto() {
  protobuf_AddDesc_friends_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friends.proto");
  GOOGLE_CHECK(file != NULL);
  SteamFriendInfo_descriptor_ = file->message_type(0);
  static const int SteamFriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendInfo, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendInfo, name_),
  };
  SteamFriendInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SteamFriendInfo_descriptor_,
      SteamFriendInfo::default_instance_,
      SteamFriendInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SteamFriendInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendInfo, _is_default_instance_));
  SteamFriendsResult_descriptor_ = file->message_type(1);
  static const int SteamFriendsResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendsResult, steamfriendinfo_),
  };
  SteamFriendsResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SteamFriendsResult_descriptor_,
      SteamFriendsResult::default_instance_,
      SteamFriendsResult_offsets_,
      -1,
      -1,
      -1,
      sizeof(SteamFriendsResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendsResult, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteamFriendsResult, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friends_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SteamFriendInfo_descriptor_, &SteamFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SteamFriendsResult_descriptor_, &SteamFriendsResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friends_2eproto() {
  delete SteamFriendInfo::default_instance_;
  delete SteamFriendInfo_reflection_;
  delete SteamFriendsResult::default_instance_;
  delete SteamFriendsResult_reflection_;
}

void protobuf_AddDesc_friends_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfriends.proto\022\016HedgeNodeProto\"1\n\017Steam"
    "FriendInfo\022\020\n\010clientId\030\001 \001(\004\022\014\n\004name\030\002 \001"
    "(\t\"N\n\022SteamFriendsResult\0228\n\017steamFriendI"
    "nfo\030\001 \003(\0132\037.HedgeNodeProto.SteamFriendIn"
    "fob\006proto3", 170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friends.proto", &protobuf_RegisterTypes);
  SteamFriendInfo::default_instance_ = new SteamFriendInfo();
  SteamFriendsResult::default_instance_ = new SteamFriendsResult();
  SteamFriendInfo::default_instance_->InitAsDefaultInstance();
  SteamFriendsResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friends_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friends_2eproto {
  StaticDescriptorInitializer_friends_2eproto() {
    protobuf_AddDesc_friends_2eproto();
  }
} static_descriptor_initializer_friends_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SteamFriendInfo::kClientIdFieldNumber;
const int SteamFriendInfo::kNameFieldNumber;
#endif  // !_MSC_VER

SteamFriendInfo::SteamFriendInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HedgeNodeProto.SteamFriendInfo)
}

void SteamFriendInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SteamFriendInfo::SteamFriendInfo(const SteamFriendInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HedgeNodeProto.SteamFriendInfo)
}

void SteamFriendInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SteamFriendInfo::~SteamFriendInfo() {
  // @@protoc_insertion_point(destructor:HedgeNodeProto.SteamFriendInfo)
  SharedDtor();
}

void SteamFriendInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SteamFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SteamFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SteamFriendInfo_descriptor_;
}

const SteamFriendInfo& SteamFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
  return *default_instance_;
}

SteamFriendInfo* SteamFriendInfo::default_instance_ = NULL;

SteamFriendInfo* SteamFriendInfo::New(::google::protobuf::Arena* arena) const {
  SteamFriendInfo* n = new SteamFriendInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SteamFriendInfo::Clear() {
  clientid_ = GOOGLE_ULONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SteamFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HedgeNodeProto.SteamFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 clientId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HedgeNodeProto.SteamFriendInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HedgeNodeProto.SteamFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HedgeNodeProto.SteamFriendInfo)
  return false;
#undef DO_
}

void SteamFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HedgeNodeProto.SteamFriendInfo)
  // optional uint64 clientId = 1;
  if (this->clientid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->clientid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HedgeNodeProto.SteamFriendInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:HedgeNodeProto.SteamFriendInfo)
}

::google::protobuf::uint8* SteamFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HedgeNodeProto.SteamFriendInfo)
  // optional uint64 clientId = 1;
  if (this->clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->clientid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HedgeNodeProto.SteamFriendInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:HedgeNodeProto.SteamFriendInfo)
  return target;
}

int SteamFriendInfo::ByteSize() const {
  int total_size = 0;

  // optional uint64 clientId = 1;
  if (this->clientid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->clientid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SteamFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SteamFriendInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SteamFriendInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SteamFriendInfo::MergeFrom(const SteamFriendInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.clientid() != 0) {
    set_clientid(from.clientid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SteamFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamFriendInfo::CopyFrom(const SteamFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamFriendInfo::IsInitialized() const {

  return true;
}

void SteamFriendInfo::Swap(SteamFriendInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteamFriendInfo::InternalSwap(SteamFriendInfo* other) {
  std::swap(clientid_, other->clientid_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SteamFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SteamFriendInfo_descriptor_;
  metadata.reflection = SteamFriendInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SteamFriendInfo

// optional uint64 clientId = 1;
void SteamFriendInfo::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SteamFriendInfo::clientid() const {
  // @@protoc_insertion_point(field_get:HedgeNodeProto.SteamFriendInfo.clientId)
  return clientid_;
}
 void SteamFriendInfo::set_clientid(::google::protobuf::uint64 value) {
  
  clientid_ = value;
  // @@protoc_insertion_point(field_set:HedgeNodeProto.SteamFriendInfo.clientId)
}

// optional string name = 2;
void SteamFriendInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SteamFriendInfo::name() const {
  // @@protoc_insertion_point(field_get:HedgeNodeProto.SteamFriendInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SteamFriendInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HedgeNodeProto.SteamFriendInfo.name)
}
 void SteamFriendInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HedgeNodeProto.SteamFriendInfo.name)
}
 void SteamFriendInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HedgeNodeProto.SteamFriendInfo.name)
}
 ::std::string* SteamFriendInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HedgeNodeProto.SteamFriendInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SteamFriendInfo::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SteamFriendInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HedgeNodeProto.SteamFriendInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SteamFriendsResult::kSteamFriendInfoFieldNumber;
#endif  // !_MSC_VER

SteamFriendsResult::SteamFriendsResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HedgeNodeProto.SteamFriendsResult)
}

void SteamFriendsResult::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SteamFriendsResult::SteamFriendsResult(const SteamFriendsResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HedgeNodeProto.SteamFriendsResult)
}

void SteamFriendsResult::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SteamFriendsResult::~SteamFriendsResult() {
  // @@protoc_insertion_point(destructor:HedgeNodeProto.SteamFriendsResult)
  SharedDtor();
}

void SteamFriendsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SteamFriendsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SteamFriendsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SteamFriendsResult_descriptor_;
}

const SteamFriendsResult& SteamFriendsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friends_2eproto();
  return *default_instance_;
}

SteamFriendsResult* SteamFriendsResult::default_instance_ = NULL;

SteamFriendsResult* SteamFriendsResult::New(::google::protobuf::Arena* arena) const {
  SteamFriendsResult* n = new SteamFriendsResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SteamFriendsResult::Clear() {
  steamfriendinfo_.Clear();
}

bool SteamFriendsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HedgeNodeProto.SteamFriendsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_steamFriendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_steamfriendinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_steamFriendInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HedgeNodeProto.SteamFriendsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HedgeNodeProto.SteamFriendsResult)
  return false;
#undef DO_
}

void SteamFriendsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HedgeNodeProto.SteamFriendsResult)
  // repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
  for (unsigned int i = 0, n = this->steamfriendinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->steamfriendinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:HedgeNodeProto.SteamFriendsResult)
}

::google::protobuf::uint8* SteamFriendsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HedgeNodeProto.SteamFriendsResult)
  // repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
  for (unsigned int i = 0, n = this->steamfriendinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->steamfriendinfo(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:HedgeNodeProto.SteamFriendsResult)
  return target;
}

int SteamFriendsResult::ByteSize() const {
  int total_size = 0;

  // repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
  total_size += 1 * this->steamfriendinfo_size();
  for (int i = 0; i < this->steamfriendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->steamfriendinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SteamFriendsResult::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SteamFriendsResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SteamFriendsResult>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SteamFriendsResult::MergeFrom(const SteamFriendsResult& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  steamfriendinfo_.MergeFrom(from.steamfriendinfo_);
}

void SteamFriendsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteamFriendsResult::CopyFrom(const SteamFriendsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteamFriendsResult::IsInitialized() const {

  return true;
}

void SteamFriendsResult::Swap(SteamFriendsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteamFriendsResult::InternalSwap(SteamFriendsResult* other) {
  steamfriendinfo_.UnsafeArenaSwap(&other->steamfriendinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SteamFriendsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SteamFriendsResult_descriptor_;
  metadata.reflection = SteamFriendsResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SteamFriendsResult

// repeated .HedgeNodeProto.SteamFriendInfo steamFriendInfo = 1;
int SteamFriendsResult::steamfriendinfo_size() const {
  return steamfriendinfo_.size();
}
void SteamFriendsResult::clear_steamfriendinfo() {
  steamfriendinfo_.Clear();
}
 const ::HedgeNodeProto::SteamFriendInfo& SteamFriendsResult::steamfriendinfo(int index) const {
  // @@protoc_insertion_point(field_get:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_.Get(index);
}
 ::HedgeNodeProto::SteamFriendInfo* SteamFriendsResult::mutable_steamfriendinfo(int index) {
  // @@protoc_insertion_point(field_mutable:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_.Mutable(index);
}
 ::HedgeNodeProto::SteamFriendInfo* SteamFriendsResult::add_steamfriendinfo() {
  // @@protoc_insertion_point(field_add:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo >&
SteamFriendsResult::steamfriendinfo() const {
  // @@protoc_insertion_point(field_list:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return steamfriendinfo_;
}
 ::google::protobuf::RepeatedPtrField< ::HedgeNodeProto::SteamFriendInfo >*
SteamFriendsResult::mutable_steamfriendinfo() {
  // @@protoc_insertion_point(field_mutable_list:HedgeNodeProto.SteamFriendsResult.steamFriendInfo)
  return &steamfriendinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace HedgeNodeProto

// @@protoc_insertion_point(global_scope)
